{"version":3,"sources":["components/CrystalBall.js","components/Cloud.js","components/Fortune.js","App.js","index.js"],"names":["CrystalBall","props","onClick","fortuneGen","cloudPart","width","height","cx","cy","r","fill","Cloud","id","style","boxShadow","cloudX","ref","cloudRef","type","baseFrequency","numOctaves","in","scale","Fortune","useState","fortunes","setFortunes","fortBeg","setFortBeg","fortMid","setFortMid","fortEnd","setFortEnd","leftRef","useRef","rightRef","useEffect","fetch","then","result","json","data","text","getRandomInt","cloudLX","cloudRX","gsap","to","current","x","max","Math","floor","random","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8KAEe,SAASA,EAAYC,GAGlC,OACE,qBACEC,QAAS,WACPD,EAAME,aAENF,EAAMG,WAAW,IAAK,MAJ1B,SAOE,qBAAKC,MAAM,MAAMC,OAAO,MAAxB,SACE,wBAAQC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAMC,KAAK,gB,KCXhC,SAASC,EAAMV,GAC5B,OACE,gCACE,qBACEW,GAAG,eACHC,MAAO,CAAEC,UAAU,GAAD,OAAKb,EAAMc,OAAX,2BAClBC,IAAKf,EAAMgB,WAEb,qBAAKZ,MAAM,IAAIC,OAAO,IAAtB,SACE,yBAAQM,GAAG,SAAX,UACE,8BACEM,KAAK,eACLC,cAAc,MACdC,WAAW,OAEb,mCAAmBC,GAAG,gBAAgBC,MAAM,eCbvC,SAASC,EAAQtB,GAE9B,MAAgCuB,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAUC,iBAAO,MACjBC,EAAWD,iBAAO,MAYxB,OATAE,qBAAU,WACRC,MAAM,yBACHC,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACG,GACLf,EAAYe,QAEf,IAID,gCACE,cAACzC,EAAD,CACEG,WAiBN,WACEyB,EAAWH,EAAS,GAAGiB,KAAKC,EAAa,KACzCb,EAAWL,EAAS,GAAGiB,KAAKC,EAAa,KACzCX,EAAWP,EAAS,GAAGiB,KAAKC,EAAa,MAnBrCvC,UA0BN,SAA4BwC,EAASC,GACnCC,IAAKC,GAAGd,EAAQe,QAAS,CAAEC,EAAGL,IAC9BE,IAAKC,GAAGZ,EAASa,QAAS,CAAEC,EAAGJ,OA1B7B,qBAAKjC,GAAG,UAAR,SACE,8BACGe,EAAU,IACVE,EAAU,IACVE,OAGL,cAACpB,EAAD,CAAOI,OAAO,MAAME,SAAUgB,IAC9B,cAACtB,EAAD,CAAOI,OAAO,MAAME,SAAUkB,OAYlC,SAASQ,EAAaO,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IChDvB,SAASI,IACtB,OACE,qBAAKC,UAAU,MAAf,SACE,cAAChC,EAAD,MCFN,IAAMiC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACN,EAAD,MAEFE,I","file":"static/js/main.47df2e40.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function CrystalBall(props) {\r\n  //the crytal ball is just a circle for now, but we'll be adding some sort of flash or smoke animation later to make it look nice.\r\n  //Clicking on the crystal ball will run the generateFortune function that was passed up, and display your fortune. As mentioned, we'll tie an animation to this later.\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        props.fortuneGen();\r\n        // props.cloudPart(\"CloudRight\");\r\n        props.cloudPart(-250, 250);\r\n      }}\r\n    >\r\n      <svg width=\"200\" height=\"200\">\r\n        <circle cx=\"100\" cy=\"100\" r=\"100\" fill=\"#D4F4F2\" />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../styles.css\";\r\n\r\nexport default function Cloud(props) {\r\n  return (\r\n    <div>\r\n      <div\r\n        id=\"cloud-circle\"\r\n        style={{ boxShadow: `${props.cloudX}px 450px 60px 0px #fff` }}\r\n        ref={props.cloudRef}\r\n      ></div>\r\n      <svg width=\"0\" height=\"0\">\r\n        <filter id=\"filter\">\r\n          <feTurbulence\r\n            type=\"fractalNoise\"\r\n            baseFrequency=\".01\"\r\n            numOctaves=\"10\"\r\n          />\r\n          <feDisplacementMap in=\"SourceGraphic\" scale=\"10\" />\r\n        </filter>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\n//style={{box-shadow: 400px 450px 60px 0px #fff}}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { gsap } from \"gsap\";\r\nimport CrystalBall from \"./CrystalBall\";\r\nimport Cloud from \"./Cloud\";\r\n\r\nexport default function Fortune(props) {\r\n  //states to hold current fortune pieces, and the fortune JSON data\r\n  const [fortunes, setFortunes] = useState([]);\r\n  const [fortBeg, setFortBeg] = useState(\"\");\r\n  const [fortMid, setFortMid] = useState(\"\");\r\n  const [fortEnd, setFortEnd] = useState(\"\");\r\n\r\n  const leftRef = useRef(null);\r\n  const rightRef = useRef(null);\r\n\r\n  //fetches JSON data\r\n  useEffect(() => {\r\n    fetch(\"data/fortuneText.json\")\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        setFortunes(data);\r\n      });\r\n  }, []);\r\n\r\n  //returns the three text pieces, initially displaying nothing, and the crystal ball image. Passes the fortuneGenerate up to the ball object\r\n  return (\r\n    <div>\r\n      <CrystalBall\r\n        fortuneGen={fortuneGenerate}\r\n        cloudPart={cloudAnimationPart}\r\n      />\r\n      <div id=\"message\">\r\n        <p>\r\n          {fortBeg + \" \"}\r\n          {fortMid + \" \"}\r\n          {fortEnd}\r\n        </p>\r\n      </div>\r\n      <Cloud cloudX=\"250\" cloudRef={leftRef} />\r\n      <Cloud cloudX=\"550\" cloudRef={rightRef} />\r\n    </div>\r\n  );\r\n\r\n  //adds the text for the fortunes to the screen.\r\n  //Right now it will always fetch element 0 of the text array, but in future it will use Math.random() to randomize the text displayed.\r\n  function fortuneGenerate() {\r\n    setFortBeg(fortunes[0].text[getRandomInt(3)]);\r\n    setFortMid(fortunes[1].text[getRandomInt(3)]);\r\n    setFortEnd(fortunes[2].text[getRandomInt(3)]);\r\n  }\r\n\r\n  function getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  function cloudAnimationPart(cloudLX, cloudRX) {\r\n    gsap.to(leftRef.current, { x: cloudLX });\r\n    gsap.to(rightRef.current, { x: cloudRX });\r\n  }\r\n}\r\n","import Fortune from \"./components/Fortune\";\nimport Cloud from \"./components/Cloud\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Fortune />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}